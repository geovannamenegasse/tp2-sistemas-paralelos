# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pares_pb2 as pares__pb2


class ParesStub(object):
    """Servico para armazenamento
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.insercao = channel.unary_unary(
                '/pares.Pares/insercao',
                request_serializer=pares__pb2.InsertRequest.SerializeToString,
                response_deserializer=pares__pb2.InsertReply.FromString,
                )
        self.consulta = channel.unary_unary(
                '/pares.Pares/consulta',
                request_serializer=pares__pb2.SearchRequest.SerializeToString,
                response_deserializer=pares__pb2.SearchReply.FromString,
                )
        self.termino = channel.unary_unary(
                '/pares.Pares/termino',
                request_serializer=pares__pb2.TerminoRequest.SerializeToString,
                response_deserializer=pares__pb2.TerminoReply.FromString,
                )


class ParesServicer(object):
    """Servico para armazenamento
    """

    def insercao(self, request, context):
        """faz uma insercao de um par no servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def consulta(self, request, context):
        """faz uma consulta por um par no servidor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def termino(self, request, context):
        """termina a conexao com os servidores de pares
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ParesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'insercao': grpc.unary_unary_rpc_method_handler(
                    servicer.insercao,
                    request_deserializer=pares__pb2.InsertRequest.FromString,
                    response_serializer=pares__pb2.InsertReply.SerializeToString,
            ),
            'consulta': grpc.unary_unary_rpc_method_handler(
                    servicer.consulta,
                    request_deserializer=pares__pb2.SearchRequest.FromString,
                    response_serializer=pares__pb2.SearchReply.SerializeToString,
            ),
            'termino': grpc.unary_unary_rpc_method_handler(
                    servicer.termino,
                    request_deserializer=pares__pb2.TerminoRequest.FromString,
                    response_serializer=pares__pb2.TerminoReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pares.Pares', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Pares(object):
    """Servico para armazenamento
    """

    @staticmethod
    def insercao(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pares.Pares/insercao',
            pares__pb2.InsertRequest.SerializeToString,
            pares__pb2.InsertReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def consulta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pares.Pares/consulta',
            pares__pb2.SearchRequest.SerializeToString,
            pares__pb2.SearchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def termino(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pares.Pares/termino',
            pares__pb2.TerminoRequest.SerializeToString,
            pares__pb2.TerminoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
